generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  username  String     @unique
  fullName  String
  password  String
  roleId    Int
  role      Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  lectures  Lecture[]
  schedules Schedule[]
  lists     List[]
  roomId    Int?       @unique
  room      Room?      @relation(fields: [roomId], references: [id])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  permissions Permission[]
  users       User[]
}

enum Table {
  User
  Role
  Permission
  Room
  Subject
  Branch
  Program
  Stage
  Class
  Hall
  Lecture
  Hour
  Day
  Schedule
  Channel
  Specialty
  Material
  Year
  Applicant
  ApplicantBranch
  Student
  Degree
  Category
  Item
  BrokenItem
  ExportedItem
  List
  ListItem
  Attendance
  Absence
  all
}

model Permission {
  id         Int    @id @default(autoincrement())
  action     String
  subject    Table
  conditions Json?
  roleId     Int
  role       Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Room {
  id          Int        @id @default(autoincrement())
  number      Int        @unique
  name        String?
  halls       Hall[]
  schedules   Schedule[]
  lists       List[]
  responsible User?
}

model Subject {
  id Int @unique @default(autoincrement())

  name         String
  isLab        Boolean
  isElectronic Boolean

  classId Int
  Class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  halls Hall[]

  @@id([classId, name])
}

model Branch {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  maxCapacity        Int
  Classes            Class[]
  acceptedApplicants Applicant[]       @relation("acceptedBranch")
  selectedBranches   ApplicantBranch[]
}

model Program {
  id      Int     @id @default(autoincrement())
  name    String
  Classes Class[]
}

model Stage {
  id            Int     @id @default(autoincrement())
  number        Int
  forbiddenDays Int[]
  Classes       Class[]
}

model Class {
  id Int @id @default(autoincrement())

  branchId Int
  branch   Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)

  programId Int
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  stageId Int
  stage   Stage @relation(fields: [stageId], references: [id], onDelete: Cascade)

  subjects  Subject[]
  schedules Schedule[]
  students  Student[]
}

model Hall {
  id        Int       @unique @default(autoincrement())
  roomId    Int
  subjectId Int
  room      Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  subject   Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  lectures  Lecture[]

  @@id([roomId, subjectId])
}

model Lecture {
  id          Int          @unique @default(autoincrement())
  hallId      Int
  teacherId   Int
  teacher     User         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  hall        Hall         @relation(fields: [hallId], references: [id], onDelete: Cascade)
  schedules   Schedule[]
  attendances Attendance[]

  @@id([hallId, teacherId])
}

model Hour {
  id        Int        @id @default(autoincrement())
  start     String
  schedules Schedule[]
}

model Day {
  id        Int        @id @default(autoincrement())
  number    Int
  schedules Schedule[]
}

model Schedule {
  id        Int     @id @default(autoincrement())
  dayId     Int
  day       Day     @relation(fields: [dayId], references: [id], onDelete: Cascade)
  hourId    Int
  hour      Hour    @relation(fields: [hourId], references: [id], onDelete: Cascade)
  roomId    Int
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  teacherId Int
  teacher   User    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  lectureId Int
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  classId   Int
  class     Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Channel {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  applicants Applicant[]
  students   Student[]
}

model Specialty {
  id               Int         @id @default(autoincrement())
  name             String      @unique
  minAvg           Int
  isDependent      Boolean     @default(false)
  customPercentage Int         @default(0)
  materials        Material[]
  applicants       Applicant[]
}

model Material {
  id               Int       @id @default(autoincrement())
  name             String
  customPercentage Int       @default(0)
  specialtyId      Int
  specialty        Specialty @relation(fields: [specialtyId], references: [id], onDelete: Cascade)
  degress          Degree[]

  @@unique([name, specialtyId])
}

enum Gender {
  MALE
  FEMALE
}

model Year {
  id         Int         @id @default(autoincrement())
  range      String      @unique
  applicants Applicant[]
  students   Student[]
}

model Applicant {
  id               Int               @id @default(autoincrement())
  name             String
  age              Int?
  schoolName       String?
  channelId        Int
  channel          Channel           @relation(fields: [channelId], references: [id], onDelete: SetNull)
  daor             Int
  totalDegree      Float             @default(0)
  average          Decimal           @default(0) @db.Decimal(4, 2)
  note             String?
  gender           Gender?
  email            String?           @unique
  city             String?
  moderia          String?
  examNumber       String?           @unique
  highSchoolYearId Int
  year             Year              @relation(fields: [highSchoolYearId], references: [id], onDelete: SetNull)
  nationalId       String?           @unique
  religion         String?
  specialtyId      Int
  specialty        Specialty         @relation(fields: [specialtyId], references: [id], onDelete: SetNull)
  branchId         Int?
  acceptedBranch   Branch?           @relation(fields: [branchId], references: [id], name: "acceptedBranch")
  degrees          Degree[]
  selectedBranches ApplicantBranch[]
}

model ApplicantBranch {
  id          Int       @unique @default(autoincrement())
  applicantId Int
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  branchId    Int
  branch      Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  priority    Int

  @@id([applicantId, branchId])
}

model Student {
  id             Int          @id @default(autoincrement())
  name           String
  age            Int?
  gender         Gender?
  email          String?      @unique
  classId        Int
  Class          Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  dateAcceptedId Int
  year           Year         @relation(fields: [dateAcceptedId], references: [id], onDelete: SetNull)
  chnnaelId      Int
  channel        Channel      @relation(fields: [chnnaelId], references: [id], onDelete: SetNull)
  attendances    Attendance[]
}

model Degree {
  id          Int       @unique @default(autoincrement())
  materialId  Int
  material    Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  applicantId Int
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  score       Float     @default(0)

  @@id([materialId, applicantId])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  items Item[]
}

model Item {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  quantity     Int       @default(0)
  description  String?
  image        String?
  categoryId   Int?
  category     Category? @relation(fields: [categoryId], references: [id])
  dateReceived DateTime  @default(now())
}

model BrokenItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  quantity    Int
  dateBroke   DateTime @default(now())
}

model ExportedItem {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  image        String?
  quantity     Int
  dateExported DateTime @default(now())
}

model List {
  id            Int        @id @default(autoincrement())
  responsibleId Int
  responsible   User       @relation(fields: [responsibleId], references: [id], onDelete: Cascade)
  dateInuse     DateTime   @default(now())
  items         ListItem[]
  room          Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId        Int
  orderImage    String?
}

model ListItem {
  id          Int     @id @default(autoincrement())
  listId      Int
  list        List    @relation(fields: [listId], references: [id], onDelete: Cascade)
  name        String
  description String?
  image       String?
  quantity    Int
}

model Attendance {
  id        Int      @unique @default(autoincrement())
  lectureId Int
  lecture   Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  date      DateTime @default(now()) @db.Date
  note      String?
  attended  Boolean  @default(false)

  @@id([lectureId, studentId, date])
}

model Absence {
  id            Int @id @default(autoincrement())
  firstWarning  Int @default(3)
  secondWarning Int @default(4)
  thirdWarning  Int @default(5)
}
