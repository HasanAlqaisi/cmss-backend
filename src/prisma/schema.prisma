generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  username  String     @unique
  fullName  String
  password  String
  roleId    Int
  role      Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  lectures  Lecture[]
  schedules Schedule[]
  lists     List[]
  roomId    Int?       @unique
  room      Room?      @relation(fields: [roomId], references: [id])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  permissions Permission[]
  users       User[]
}

enum Table {
  User
  Role
  Permission
  Room
  Subject
  Branch
  Program
  Stage
  Class
  Hall
  Lecture
  Hour
  Day
  Schedule
  Channel
  Specialty
  Material
  Year
  Applicant
  ApplicantBranch
  Student
  Degree
  all
}

model Permission {
  id         Int    @id @default(autoincrement())
  action     String
  subject    Table
  conditions Json?
  roleId     Int
  role       Role   @relation(fields: [roleId], references: [id])
}

model Room {
  id          Int        @id @default(autoincrement())
  number      Int        @unique
  name        String?
  halls       Hall[]
  schedules   Schedule[]
  lists       List[]
  responsible User?
}

model Subject {
  id           Int     @id @default(autoincrement())
  classId      Int
  Class        Class   @relation(fields: [classId], references: [id])
  name         String
  isElectronic Boolean
  isLab        Boolean
  halls        Hall[]
}

model Branch {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  maxCapacity        Int
  Classes            Class[]
  // applicants         Applicant[]
  acceptedApplicants Applicant[]       @relation("acceptedBranch")
  selectedBranches   ApplicantBranch[]
}

model Program {
  id      Int     @id @default(autoincrement())
  name    String
  Classes Class[]
}

model Stage {
  id            Int     @id @default(autoincrement())
  number        Int
  forbiddenDays Int[]
  Classes       Class[]
}

model Class {
  id        Int        @id @default(autoincrement())
  branchId  Int
  programId Int
  stageId   Int
  branch    Branch     @relation(fields: [branchId], references: [id])
  program   Program    @relation(fields: [programId], references: [id])
  stage     Stage      @relation(fields: [stageId], references: [id])
  subjects  Subject[]
  schedules Schedule[]
  students  Student[]
}

model Hall {
  id        Int       @unique @default(autoincrement())
  roomId    Int
  subjectId Int
  room      Room      @relation(fields: [roomId], references: [id])
  subject   Subject   @relation(fields: [subjectId], references: [id])
  lectures  Lecture[]

  @@id([roomId, subjectId])
}

model Lecture {
  id        Int  @unique @default(autoincrement())
  hallId    Int
  teacherId Int
  teacher   User @relation(fields: [teacherId], references: [id])
  hall      Hall @relation(fields: [hallId], references: [id])
  // schedules Schedule[]

  schedules Schedule[]
  @@id([hallId, teacherId])
}

model Hour {
  id        Int        @id @default(autoincrement())
  start     String
  // dayHours DayHour[]
  schedules Schedule[]
}

model Day {
  id        Int        @id @default(autoincrement())
  number    Int
  // dayHours DayHour[]
  schedules Schedule[]
}

// model DayHour {
//   id     Int  @id @default(autoincrement())
//   hourId Int
//   hour   Hour @relation(fields: [hourId], references: [id])
//   dayId  Int
//   day    Day  @relation(fields: [dayId], references: [id])

//   schedules Schedule[]
// }

model Schedule {
  id        Int     @id @default(autoincrement())
  // dayHourId Int
  // dayHour   DayHour @relation(fields: [dayHourId], references: [id])
  // lectureId Int
  // lecture   Lecture @relation(fields: [lectureId], references: [id])
  dayId     Int
  day       Day     @relation(fields: [dayId], references: [id])
  hourId    Int
  hour      Hour    @relation(fields: [hourId], references: [id])
  roomId    Int
  room      Room    @relation(fields: [roomId], references: [id])
  teacherId Int
  teacher   User    @relation(fields: [teacherId], references: [id])
  lectureId Int
  lecture   Lecture @relation(fields: [lectureId], references: [id])
  classId   Int
  class     Class   @relation(fields: [classId], references: [id])
}

model Channel {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  applicants Applicant[]
  students   Student[]
}

model Specialty {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  capacity    Int
  isDependent Boolean     @default(false)
  materials   Material[]
  applicants  Applicant[]
}

model Material {
  id               Int       @id @default(autoincrement())
  name             String    @unique
  customPercentage Int       @default(0)
  specialtyId      Int
  specialty        Specialty @relation(fields: [specialtyId], references: [id])
  degress          Degree[]
}

enum Gender {
  MALE
  FEMALE
}

model Year {
  id         Int         @id @default(autoincrement())
  range      String      @unique
  applicants Applicant[]
  students   Student[]
}

model Applicant {
  id               Int               @id @default(autoincrement())
  name             String
  age              Int?
  schoolName       String?
  channelId        Int
  channel          Channel           @relation(fields: [channelId], references: [id])
  daor             Int
  totalDegree      Decimal?
  average          Decimal?
  note             String?
  gender           Gender?
  email            String?           @unique
  city             String?
  moderia          String?
  examNumber       String?           @unique
  highSchoolYearId Int
  year             Year              @relation(fields: [highSchoolYearId], references: [id])
  nationalId       String?           @unique
  religion         String?
  specialtyId      Int
  specialty        Specialty         @relation(fields: [specialtyId], references: [id])
  // selectedBranches Branch[]
  branchId         Int?
  acceptedBranch   Branch?           @relation(fields: [branchId], references: [id], name: "acceptedBranch")
  degrees          Degree[]
  selectedBranches ApplicantBranch[]
}

model ApplicantBranch {
  id          Int       @unique @default(autoincrement())
  applicantId Int
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  branchId    Int
  branch      Branch    @relation(fields: [branchId], references: [id])
  priority    Int

  @@id([applicantId, branchId])
}

model Student {
  id             Int     @id @default(autoincrement())
  name           String
  age            Int
  gender         Gender
  email          String  @unique
  classId        Int
  Class          Class   @relation(fields: [classId], references: [id])
  dateAcceptedId Int
  year           Year    @relation(fields: [dateAcceptedId], references: [id])
  chnnaelId      Int
  channel        Channel @relation(fields: [chnnaelId], references: [id])
}

model Degree {
  id          Int       @unique @default(autoincrement())
  materialId  Int
  material    Material  @relation(fields: [materialId], references: [id])
  applicantId Int
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  score       Float     @default(0)

  @@id([materialId, applicantId])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  items Item[]
}

model Item {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  quantity     Int       @default(0)
  description  String?
  image        String?
  categoryId   Int?
  category     Category? @relation(fields: [categoryId], references: [id])
  dateReceived DateTime  @default(now())
}

model BrokenItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  quantity    Int
  dateBroke   DateTime @default(now())
}

model ExportedItem {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  image        String?
  quantity     Int
  dateExported DateTime @default(now())
}

model List {
  id            Int        @id @default(autoincrement())
  responsibleId Int
  responsible   User       @relation(fields: [responsibleId], references: [id], onDelete: Cascade)
  dateInuse     DateTime   @default(now())
  items         ListItem[]
  Room          Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId        Int
  orderImage    String?
}

model ListItem {
  id          Int     @id @default(autoincrement())
  listId      Int
  list        List    @relation(fields: [listId], references: [id], onDelete: Cascade)
  name        String
  description String?
  image       String?
  quantity    Int
}
